{
  "name": "ring-progress",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/ring-progress.tsx",
      "content": "import { forwardRef, HTMLAttributes, SVGAttributes } from 'react'\n\nimport { cn } from '@/lib/utils'\n\nexport interface RingProgressProps extends HTMLAttributes<HTMLDivElement> {\n  value?: number\n  max?: number\n  thickness?: number\n  size?: number\n  rounded?: boolean\n  rangeClassname?: string\n}\n\nconst RingProgress = forwardRef<HTMLDivElement, RingProgressProps>(({\n  value = 0,\n  max = 100,\n  thickness = 6,\n  size = 72,\n  rounded,\n  className,\n  rangeClassname,\n  children,\n  style,\n  ...props\n}, ref) => {\n  const curveProps: CurveProps = {\n    size,\n    max,\n    className: rangeClassname,\n    thickness: Math.min(thickness, size / 4),\n  }\n\n  return (\n    <div\n      role=\"progressbar\"\n      data-value={value}\n      data-max={max}\n      aria-valuemin={0}\n      aria-valuemax={max}\n      aria-valuenow={value}\n      aria-valuetext={`${Math.round((value / max) * 100)}%`}\n      className={cn('relative', className)}\n      ref={ref}\n      {...props}\n    >\n      <svg className=\"-rotate-90\" width={size} height={size}>\n        <Curve root {...curveProps} />\n        <Curve rounded={rounded} value={value} {...curveProps} />\n      </svg>\n      {children && (\n        <div\n          className=\"absolute top-1/2 -translate-y-1/2 flex flex-col items-center justify-center\"\n          style={{ insetInline: thickness * 2 }}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  )\n})\nRingProgress.displayName = 'RingProgress'\n\ninterface CurveProps extends SVGAttributes<SVGCircleElement> {\n  rounded?: boolean\n  value?: number\n  max?: number\n  size: number\n  thickness: number\n  root?: boolean\n}\n\nconst Curve = forwardRef<SVGCircleElement, CurveProps>(({\n  rounded = true,\n  size,\n  value = 0,\n  max = 100,\n  thickness,\n  root,\n  color,\n  className,\n  ...props\n}, ref) => {\n  const radius = (size - thickness) / 2\n  const perimeter = Math.PI * radius * 2\n\n  return (\n    <circle\n      ref={ref}\n      fill=\"none\"\n      data-root={root ? '' : undefined}\n      className={cn('stroke-primary data-[root]:stroke-muted transition-[stroke-dashoffset] duration-200', className)}\n      cx={size / 2}\n      cy={size / 2}\n      r={radius}\n      strokeWidth={thickness}\n      strokeLinecap={!root && rounded ? 'round' : 'butt'}\n      strokeDasharray={root ? undefined : `${perimeter}, ${perimeter}`}\n      strokeDashoffset={root ? undefined : (1 - Math.min(value, max) / max) * perimeter}\n      {...props}\n    />\n  )\n})\nCurve.displayName = 'Curve'\n\nexport { RingProgress }",
      "type": "registry:ui",
      "target": ""
    }
  ]
}