{
  "name": "ring-progress",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/ring-progress.tsx",
      "content": "import { forwardRef, HTMLAttributes, SVGAttributes } from 'react'\n\nimport { cn } from '@/lib/utils'\n\nexport interface RingProgressProps extends HTMLAttributes<HTMLDivElement> {\n  value?: number\n  max?: number\n  thickness?: number\n  size?: number\n  rounded?: boolean\n  rangeClassname?: string\n}\n\nconst RingProgress = forwardRef<HTMLDivElement, RingProgressProps>(\n  (\n    { value = 0, max = 100, thickness = 6, size = 72, rounded, className, rangeClassname, children, style, ...props },\n    ref,\n  ) => {\n    const curveProps: CurveProps = {\n      size,\n      max,\n      className: rangeClassname,\n      thickness: Math.min(thickness, size / 4),\n    }\n\n    return (\n      <div\n        role=\"progressbar\"\n        data-value={value}\n        data-max={max}\n        aria-valuemin={0}\n        aria-valuemax={max}\n        aria-valuenow={value}\n        aria-valuetext={`${Math.round((value / max) * 100)}%`}\n        className={cn('relative', className)}\n        ref={ref}\n        {...props}\n      >\n        <svg className=\"-rotate-90\" width={size} height={size}>\n          <Curve root {...curveProps} />\n          <Curve rounded={rounded} value={value} {...curveProps} />\n        </svg>\n        {children && (\n          <div\n            className=\"absolute top-1/2 flex -translate-y-1/2 flex-col items-center justify-center\"\n            style={{ insetInline: thickness * 2 }}\n          >\n            {children}\n          </div>\n        )}\n      </div>\n    )\n  },\n)\nRingProgress.displayName = 'RingProgress'\n\ninterface CurveProps extends SVGAttributes<SVGCircleElement> {\n  rounded?: boolean\n  value?: number\n  max?: number\n  size: number\n  thickness: number\n  root?: boolean\n}\n\nconst Curve = forwardRef<SVGCircleElement, CurveProps>(\n  ({ rounded = true, size, value = 0, max = 100, thickness, root, color, className, ...props }, ref) => {\n    const radius = (size - thickness) / 2\n    const perimeter = Math.PI * radius * 2\n\n    return (\n      <circle\n        ref={ref}\n        fill=\"none\"\n        data-root={root ? '' : undefined}\n        className={cn('stroke-primary-9 transition-[stroke-dashoffset] duration-200 data-[root]:stroke-muted', className)}\n        cx={size / 2}\n        cy={size / 2}\n        r={radius}\n        strokeWidth={thickness}\n        strokeLinecap={!root && rounded ? 'round' : 'butt'}\n        strokeDasharray={root ? undefined : `${perimeter}, ${perimeter}`}\n        strokeDashoffset={root ? undefined : (1 - Math.min(value, max) / max) * perimeter}\n        {...props}\n      />\n    )\n  },\n)\nCurve.displayName = 'Curve'\n\nexport { RingProgress }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}