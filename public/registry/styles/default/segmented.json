{
  "name": "segmented",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-radio-group"
  ],
  "files": [
    {
      "path": "ui/segmented.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nexport const segmentedVariants = cva(\n  'relative inline-flex items-center justify-center rounded-lg p-1 bg-segment text-segment-fg',\n  {\n    variants: {\n      size: {\n        sm: 'h-8 [&>button]:h-6 [&>button]:text-xs [&>button]:px-2.5',\n        md: 'h-9 [&>button]:h-7 [&>button]:text-sm [&>button]:px-3',\n        lg: 'h-10 [&>button]:h-8 [&>button]:text-sm [&>button]:px-3.5',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n)\n\nexport const Segmented = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root> & VariantProps<typeof segmentedVariants>\n>(({ className, size, ...props }, ref) => {\n  return <RadioGroupPrimitive.Root className={cn(segmentedVariants({ size }), className)} {...props} ref={ref} />\n})\nSegmented.displayName = 'Segmented'\n\nexport const SegmentedItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        'focus-visible:ring-ring-focus data-[state=checked]:bg-segment-active data-[state=checked]:text-segment-active-fg not-first:before:data-[state=unchecked]:border-l hover:data-[state=unchecked]:text-accent-fg active:data-[state=unchecked]:bg-accent-dark relative inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium ring-offset-background transition-all before:absolute before:-left-[0.5px] before:h-5 before:transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-0 disabled:pointer-events-none disabled:opacity-50 data-[state=checked]:z-[1] data-[state=checked]:shadow hover:data-[state=unchecked]:bg-accent before:[&+input+button]:data-[state=checked]:border-l-transparent',\n        className,\n      )}\n      {...props}\n    />\n  )\n})\nSegmentedItem.displayName = 'SegmentedItem'\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "colors": {
            "segment": {
              "DEFAULT": "hsl(var(--segment))",
              "fg": "hsl(var(--segment-fg))",
              "active": {
                "DEFAULT": "hsl(var(--segment-active))",
                "fg": "hsl(var(--segment-active-fg))"
              }
            }
          }
        }
      }
    }
  }
}