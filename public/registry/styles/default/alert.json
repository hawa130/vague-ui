{
  "name": "alert",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/alert.tsx",
      "content": "import { cva, type VariantProps } from 'class-variance-authority'\nimport { AlertCircle, AlertTriangle, CircleCheck, Info } from 'lucide-react'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nconst alertVariants = cva(\n  'relative w-full py-3 px-4 [&>i~*]:pl-6 [&>i+div]:py-0.5 [&>i+h5+div]:mt-0.5 [&>i]:absolute [&>i]:left-4 [&>i]:top-4 [&>i]:text-foreground',\n  {\n    variants: {\n      variant: {\n        outline: 'border rounded-lg',\n        surface: 'border rounded-lg',\n        soft: '',\n      },\n      color: {\n        default: '',\n        primary: '',\n        destructive: '',\n        warning: '',\n        success: '',\n        info: '',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: 'outline',\n        color: 'default',\n        className: 'bg-background text-foreground [&>i]:text-foreground',\n      },\n      {\n        variant: ['surface', 'soft'],\n        color: 'default',\n        className: 'bg-secondary text-secondary-fg [&>i]:text-secondary-fg',\n      },\n      {\n        variant: 'outline',\n        color: 'primary',\n        className: 'border-primary text-primary [&>i]:text-primary',\n      },\n      {\n        variant: 'surface',\n        color: 'primary',\n        className: 'border-primary-pale bg-primary-light text-primary [&>i]:text-primary',\n      },\n      {\n        variant: 'soft',\n        color: 'primary',\n        className: 'bg-primary-light text-primary [&>i]:text-primary',\n      },\n      {\n        variant: 'outline',\n        color: 'destructive',\n        className: 'border-destructive text-destructive [&>i]:text-destructive',\n      },\n      {\n        variant: 'surface',\n        color: 'destructive',\n        className: 'border-destructive-pale bg-destructive-light text-destructive [&>i]:text-destructive',\n      },\n      {\n        variant: 'soft',\n        color: 'destructive',\n        className: 'bg-destructive-light text-destructive [&>i]:text-destructive',\n      },\n      {\n        variant: 'outline',\n        color: 'warning',\n        className: 'border-warning text-warning [&>i]:text-warning',\n      },\n      {\n        variant: 'surface',\n        color: 'warning',\n        className: 'border-warning-pale bg-warning-light text-warning [&>i]:text-warning',\n      },\n      {\n        variant: 'soft',\n        color: 'warning',\n        className: 'bg-warning-light text-warning [&>i]:text-warning',\n      },\n      {\n        variant: 'outline',\n        color: 'success',\n        className: 'border-success text-success [&>i]:text-success',\n      },\n      {\n        variant: 'surface',\n        color: 'success',\n        className: 'border-success-pale bg-success-light text-success [&>i]:text-success',\n      },\n      {\n        variant: 'soft',\n        color: 'success',\n        className: 'bg-success-light text-success [&>i]:text-success',\n      },\n      {\n        variant: 'outline',\n        color: 'info',\n        className: 'border-info text-info [&>i]:text-info',\n      },\n      {\n        variant: 'surface',\n        color: 'info',\n        className: 'border-info-pale bg-info-light text-info [&>i]:text-info',\n      },\n      {\n        variant: 'soft',\n        color: 'info',\n        className: 'bg-info-light text-info [&>i]:text-info',\n      },\n    ],\n    defaultVariants: {\n      variant: 'surface',\n      color: 'default',\n    },\n  },\n)\n\nexport type AlertProps = Omit<React.HTMLAttributes<HTMLDivElement>, 'title' | 'color'> &\n  VariantProps<typeof alertVariants> & {\n    icon?: React.ReactNode\n    title?: React.ReactNode\n  }\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(({ title, color, icon, children, ...props }, ref) => {\n  const resolvedIcon =\n    icon ??\n    ((color) => {\n      switch (color) {\n        case 'destructive':\n          return <AlertCircle className=\"h-4 w-4\" />\n        case 'warning':\n          return <AlertTriangle className=\"h-4 w-4\" />\n        case 'success':\n          return <CircleCheck className=\"h-4 w-4\" />\n        case 'info':\n          return <Info className=\"h-4 w-4\" />\n        default:\n          return null\n      }\n    })(color)\n\n  return (\n    <AlertContainer ref={ref} color={color} {...props}>\n      {!(!title && !children) && resolvedIcon && <i className=\"h-4 w-4\">{resolvedIcon}</i>}\n      {!!title && <AlertTitle>{title}</AlertTitle>}\n      {!!children && <AlertDescription>{children}</AlertDescription>}\n    </AlertContainer>\n  )\n})\nAlert.displayName = 'Alert'\n\nconst AlertContainer = React.forwardRef<\n  HTMLDivElement,\n  Omit<React.HTMLAttributes<HTMLDivElement>, 'color'> & VariantProps<typeof alertVariants>\n>(({ className, variant, color, ...props }, ref) => (\n  <div ref={ref} role=\"alert\" className={cn(alertVariants({ variant, color }), className)} {...props} />\n))\nAlertContainer.displayName = 'AlertContainer'\n\nconst AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => <h5 ref={ref} className={cn('font-medium', className)} {...props} />,\n)\nAlertTitle.displayName = 'AlertTitle'\n\nconst AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('text-sm text-foreground/75 [&_p]:leading-relaxed', className)} {...props} />\n  ),\n)\nAlertDescription.displayName = 'AlertDescription'\n\nexport { Alert, AlertContainer, AlertTitle, AlertDescription }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}