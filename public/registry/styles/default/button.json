{
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "spinner"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "import { Slot, Slottable } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\nimport { Spinner } from '@/registry/default/ui/spinner'\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring-focus focus-visible:ring-offset-0 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        filled: '',\n        outline: 'border',\n        dashed: 'border border-dashed',\n        ghost: 'hover:bg-accent active:bg-accent-dark',\n        light: 'bg-secondary hover:bg-accent active:bg-accent-dark',\n        subtle: '',\n        soft: '',\n      },\n      color: {\n        default: '',\n        primary: '',\n        destructive: '',\n        warning: '',\n        success: '',\n        info: '',\n      },\n      size: {\n        '2xs': 'h-5 px-2 text-xs font-semibold gap-1',\n        xs: 'h-6 px-2.5 text-xs gap-1',\n        sm: 'h-8 px-3 text-sm gap-1.5',\n        md: 'h-9 px-4 text-sm gap-2',\n        lg: 'h-11 px-5 text-base gap-2 rounded-lg',\n        xl: 'h-14 px-6 text-lg gap-3 rounded-xl',\n        'icon-2xs': 'h-4 w-4',\n        'icon-xs': 'h-6 w-6',\n        'icon-sm': 'h-8 w-8',\n        'icon-md': 'h-9 w-9',\n        'icon-lg': 'h-11 w-11',\n        'icon-xl': 'h-14 w-14',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: ['filled', 'light', 'soft'],\n        color: 'default',\n        className: 'bg-secondary text-secondary-fg hover:bg-accent hover:text-accent-fg active:bg-accent-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'default',\n        className:\n          'border-input bg-button hover:bg-accent hover:text-accent-fg hover:border-ring-accent active:bg-accent-dark',\n      },\n      {\n        variant: ['ghost', 'subtle'],\n        color: 'default',\n        className: 'hover:text-accent-fg hover:bg-accent active:bg-accent-dark',\n      },\n      {\n        variant: 'filled',\n        color: 'primary',\n        className: 'bg-primary text-fg-invert hover:bg-primary-deep active:bg-primary-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'primary',\n        className: 'border-primary text-primary hover:bg-primary-light active:text-primary-dark active:bg-primary-pale',\n      },\n      {\n        variant: ['ghost', 'light'],\n        color: 'primary',\n        className: 'text-primary active:text-primary-dark',\n      },\n      {\n        variant: 'subtle',\n        color: 'primary',\n        className: 'text-primary hover:bg-primary-light active:text-primary-dark active:bg-primary-pale',\n      },\n      {\n        variant: 'soft',\n        color: 'primary',\n        className:\n          'text-primary bg-primary-light hover:bg-primary-soft active:text-primary-dark active:bg-primary-pale',\n      },\n      {\n        variant: 'filled',\n        color: 'destructive',\n        className: 'bg-destructive text-fg-invert hover:bg-destructive-deep active:bg-destructive-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'destructive',\n        className:\n          'border-destructive text-destructive hover:bg-destructive-light active:text-destructive-dark active:bg-destructive-pale',\n      },\n      {\n        variant: ['ghost', 'light'],\n        color: 'destructive',\n        className: 'text-destructive active:text-destructive-dark',\n      },\n      {\n        variant: 'subtle',\n        color: 'destructive',\n        className:\n          'text-destructive hover:bg-destructive-light active:text-destructive-dark active:bg-destructive-pale',\n      },\n      {\n        variant: 'soft',\n        color: 'destructive',\n        className:\n          'text-destructive bg-destructive-light hover:bg-destructive-soft active:text-destructive-dark active:bg-destructive-pale',\n      },\n      {\n        variant: 'filled',\n        color: 'warning',\n        className: 'bg-warning text-fg-invert hover:bg-warning-deep active:bg-warning-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'warning',\n        className: 'border-warning text-warning hover:bg-warning-light active:text-warning-dark active:bg-warning-pale',\n      },\n      {\n        variant: ['ghost', 'light'],\n        color: 'warning',\n        className: 'text-warning active:text-warning-dark',\n      },\n      {\n        variant: 'subtle',\n        color: 'warning',\n        className: 'text-warning hover:bg-warning-light active:text-warning-dark active:bg-warning-pale',\n      },\n      {\n        variant: 'soft',\n        color: 'warning',\n        className:\n          'text-warning bg-warning-light hover:bg-warning-soft active:text-warning-dark active:bg-warning-pale',\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        className: 'bg-success text-fg-invert hover:bg-success-deep active:bg-success-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'success',\n        className: 'border-success text-success hover:bg-success-light active:text-success-dark active:bg-success-pale',\n      },\n      {\n        variant: ['ghost', 'light'],\n        color: 'success',\n        className: 'text-success active:text-success-dark',\n      },\n      {\n        variant: 'subtle',\n        color: 'success',\n        className: 'text-success hover:bg-success-light active:text-success-dark active:bg-success-pale',\n      },\n      {\n        variant: 'soft',\n        color: 'success',\n        className:\n          'text-success bg-success-light hover:bg-success-soft active:text-success-dark active:bg-success-pale',\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        className: 'bg-info text-fg-invert hover:bg-info-deep active:bg-info-dark',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'info',\n        className: 'border-info text-info hover:bg-info-light active:text-info-dark active:bg-info-pale',\n      },\n      {\n        variant: ['ghost', 'light'],\n        color: 'info',\n        className: 'text-info active:text-info-dark',\n      },\n      {\n        variant: 'subtle',\n        color: 'info',\n        className: 'text-info hover:bg-info-light active:text-info-dark active:bg-info-pale',\n      },\n      {\n        variant: 'soft',\n        color: 'info',\n        className: 'text-info bg-info-light hover:bg-info-soft active:text-info-dark active:bg-info-pale',\n      },\n    ],\n    defaultVariants: {\n      variant: 'outline',\n      color: 'default',\n      size: 'md',\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'color'>,\n    VariantProps<typeof buttonVariants> {\n  loading?: boolean\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, children, loading, variant, size = 'md', asChild = false, disabled, color, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button'\n\n    return (\n      <Comp\n        type={asChild ? undefined : 'button'}\n        disabled={disabled || loading}\n        data-loading={loading ? '' : undefined}\n        className={cn(buttonVariants({ variant, size, color, className }))}\n        ref={ref}\n        {...props}\n      >\n        {loading && (\n          <Spinner\n            className={cn({\n              'size-3': ['icon-2xs', '2xs', 'icon-xs', 'xs'].includes(size!),\n              'size-4': ['icon-sm', 'sm', 'icon-md', 'md'].includes(size!),\n              'size-5': ['icon-lg', 'lg'].includes(size!),\n            })}\n          />\n        )}\n        <Slottable>{children}</Slottable>\n      </Comp>\n    )\n  },\n)\nButton.displayName = 'Button'\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}