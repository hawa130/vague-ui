{
  "name": "progress",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-progress"
  ],
  "files": [
    {
      "path": "ui/progress.tsx",
      "content": "'use client'\n\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nexport interface ProgressProps extends React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {\n  thickness?: number\n  size?: string | number\n  rounded?: boolean\n  rangeClassname?: string\n  orientation?: 'horizontal' | 'vertical'\n}\n\nconst Progress = React.forwardRef<React.ElementRef<typeof ProgressPrimitive.Root>, ProgressProps>(\n  (\n    {\n      className,\n      thickness = 6,\n      size = '100%',\n      value = 0,\n      max = 100,\n      rangeClassname,\n      rounded = true,\n      orientation = 'horizontal',\n      style,\n      ...props\n    },\n    ref,\n  ) => {\n    const percentage = (Math.min(value || 0, max) / max) * 100\n    return (\n      <ProgressPrimitive.Root\n        ref={ref}\n        max={max}\n        className={cn('relative overflow-hidden rounded-full bg-muted', className)}\n        style={{\n          height: orientation === 'horizontal' ? thickness : size,\n          width: orientation === 'vertical' ? thickness : size,\n          ...style,\n        }}\n        {...props}\n      >\n        <ProgressPrimitive.Indicator\n          className={cn('bg-primary transition-[width] duration-200', rounded && 'rounded-full', rangeClassname)}\n          style={{\n            width: orientation === 'horizontal' ? `${percentage}%` : '100%',\n            height: orientation === 'vertical' ? `${percentage}%` : '100%',\n          }}\n        />\n      </ProgressPrimitive.Root>\n    )\n  },\n)\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}