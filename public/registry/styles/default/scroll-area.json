{
  "name": "scroll-area",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-scroll-area"
  ],
  "files": [
    {
      "path": "ui/scroll-area.tsx",
      "content": "'use client'\n\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nexport interface ScrollAreaProps extends React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> {\n  viewportRef?: React.ForwardedRef<HTMLDivElement>\n  onScrollPositionChange?: (position: { x: number; y: number }) => void\n  orientation?: 'horizontal' | 'vertical'\n  scrollBarClassName?: string\n}\n\nconst ScrollArea = React.forwardRef<React.ElementRef<typeof ScrollAreaPrimitive.Root>, ScrollAreaProps>(\n  (\n    {\n      className,\n      viewportRef,\n      onScrollPositionChange,\n      orientation = 'vertical',\n      scrollBarClassName,\n      children,\n      ...props\n    },\n    ref,\n  ) => (\n    <ScrollAreaPrimitive.Root ref={ref} className={cn('relative overflow-hidden', className)} {...props}>\n      <ScrollAreaPrimitive.Viewport\n        ref={viewportRef}\n        className=\"h-full w-full rounded-[inherit] [&>div]:!block\"\n        onScroll={\n          typeof onScrollPositionChange === 'function'\n            ? ({ currentTarget }) =>\n                onScrollPositionChange({\n                  x: currentTarget.scrollLeft,\n                  y: currentTarget.scrollTop,\n                })\n            : undefined\n        }\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar className={scrollBarClassName} />\n      {orientation === 'horizontal' && <ScrollBar className={scrollBarClassName} orientation=\"horizontal\" />}\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  ),\n)\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' && 'h-full w-2 border-l border-l-transparent p-[1px] transition-[width] hover:w-3',\n      orientation === 'horizontal' && 'h-2 border-t border-t-transparent p-[1px] transition-[height] hover:h-3',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}