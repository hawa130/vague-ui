{
  "name": "badge",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/badge.tsx",
      "content": "import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-full font-semibold text-xs overflow-hidden overflow-ellipsis whitespace-nowrap',\n  {\n    variants: {\n      variant: {\n        filled: 'border border-transparent',\n        outline: 'border',\n        dashed: 'border border-dashed',\n        light: 'border border-transparent',\n      },\n      color: {\n        default: '',\n        primary: '',\n        destructive: '',\n        warning: '',\n        success: '',\n        info: '',\n      },\n      size: {\n        xs: 'h-4 min-w-4 px-[.1875rem] text-[.625rem] uppercase',\n        sm: 'h-[1.125rem] min-w-[1.125rem] px-[.3125rem] text-[.6875rem] uppercase',\n        md: 'h-5 px-2',\n        lg: 'h-6 px-2.5 text-[.8125rem]',\n        xl: 'h-8 px-3 text-sm',\n      },\n    },\n    compoundVariants: [\n      {\n        variant: ['filled', 'light'],\n        color: 'default',\n        className: 'bg-secondary text-secondary-fg',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'default',\n        className: 'text-foreground',\n      },\n      {\n        variant: 'filled',\n        color: 'primary',\n        className: 'bg-primary text-fg-invert',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'primary',\n        className: 'border-primary text-primary',\n      },\n      {\n        variant: 'light',\n        color: 'primary',\n        className: 'text-primary bg-primary-1',\n      },\n      {\n        variant: 'filled',\n        color: 'destructive',\n        className: 'bg-destructive text-fg-invert',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'destructive',\n        className: 'border-destructive text-destructive',\n      },\n      {\n        variant: 'light',\n        color: 'destructive',\n        className: 'text-destructive bg-destructive-1',\n      },\n      {\n        variant: 'filled',\n        color: 'warning',\n        className: 'bg-warning text-fg-invert',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'warning',\n        className: 'border-warning text-warning',\n      },\n      {\n        variant: 'light',\n        color: 'warning',\n        className: 'text-warning bg-warning-1',\n      },\n      {\n        variant: 'filled',\n        color: 'success',\n        className: 'bg-success text-fg-invert',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'success',\n        className: 'border-success text-success',\n      },\n      {\n        variant: 'light',\n        color: 'success',\n        className: 'text-success bg-success-1',\n      },\n      {\n        variant: 'filled',\n        color: 'info',\n        className: 'bg-info text-fg-invert',\n      },\n      {\n        variant: ['outline', 'dashed'],\n        color: 'info',\n        className: 'border-info text-info',\n      },\n      {\n        variant: 'light',\n        color: 'info',\n        className: 'text-info bg-info-1',\n      },\n    ],\n    defaultVariants: {\n      variant: 'light',\n      color: 'default',\n      size: 'md',\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'color'>,\n    VariantProps<typeof badgeVariants> {\n  circle?: boolean\n}\n\nfunction Badge({ className, variant, color, size, circle, children, ...props }: BadgeProps) {\n  const hasChild = !!children\n  return (\n    <span\n      className={cn(\n        badgeVariants({ variant, color, size }),\n        !hasChild && {\n          'p-0': true,\n          'h-1 w-1 min-w-1': size === 'xs',\n          'h-1.5 w-1.5 min-w-1.5': size === 'sm',\n          'h-2 w-2': size === 'md',\n          'h-2.5 w-2.5': size === 'lg',\n          'h-3 w-3': size === 'xl',\n        },\n        circle &&\n          hasChild && {\n            'w-4': size === 'xs',\n            'w-[1.125rem]': size === 'sm',\n            'w-5': size === 'md',\n            'w-6': size === 'lg',\n            'w-8': size === 'xl',\n          },\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}